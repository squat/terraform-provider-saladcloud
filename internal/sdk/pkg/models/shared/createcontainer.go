// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type CreateContainerNewRelic struct {
	Host         string `json:"host"`
	IngestionKey string `json:"ingestion_key"`
}

func (o *CreateContainerNewRelic) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateContainerNewRelic) GetIngestionKey() string {
	if o == nil {
		return ""
	}
	return o.IngestionKey
}

type CreateContainerSplunk struct {
	Host  string `json:"host"`
	Token string `json:"token"`
}

func (o *CreateContainerSplunk) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateContainerSplunk) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type CreateContainerTCP struct {
	Host string `json:"host"`
	Port int64  `json:"port"`
}

func (o *CreateContainerTCP) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateContainerTCP) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

type CreateContainerLogging struct {
	NewRelic *CreateContainerNewRelic `json:"new_relic,omitempty"`
	Splunk   *CreateContainerSplunk   `json:"splunk,omitempty"`
	TCP      *CreateContainerTCP      `json:"tcp,omitempty"`
}

func (o *CreateContainerLogging) GetNewRelic() *CreateContainerNewRelic {
	if o == nil {
		return nil
	}
	return o.NewRelic
}

func (o *CreateContainerLogging) GetSplunk() *CreateContainerSplunk {
	if o == nil {
		return nil
	}
	return o.Splunk
}

func (o *CreateContainerLogging) GetTCP() *CreateContainerTCP {
	if o == nil {
		return nil
	}
	return o.TCP
}

type AwsEcr struct {
	AccessKeyID     string `json:"access_key_id"`
	SecretAccessKey string `json:"secret_access_key"`
}

func (o *AwsEcr) GetAccessKeyID() string {
	if o == nil {
		return ""
	}
	return o.AccessKeyID
}

func (o *AwsEcr) GetSecretAccessKey() string {
	if o == nil {
		return ""
	}
	return o.SecretAccessKey
}

type Basic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (o *Basic) GetPassword() string {
	if o == nil {
		return ""
	}
	return o.Password
}

func (o *Basic) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type DockerHub struct {
	PersonalAccessToken string `json:"personal_access_token"`
	Username            string `json:"username"`
}

func (o *DockerHub) GetPersonalAccessToken() string {
	if o == nil {
		return ""
	}
	return o.PersonalAccessToken
}

func (o *DockerHub) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GcpGcr struct {
	ServiceKey string `json:"service_key"`
}

func (o *GcpGcr) GetServiceKey() string {
	if o == nil {
		return ""
	}
	return o.ServiceKey
}

type RegistryAuthentication struct {
	AwsEcr    *AwsEcr    `json:"aws_ecr,omitempty"`
	Basic     *Basic     `json:"basic,omitempty"`
	DockerHub *DockerHub `json:"docker_hub,omitempty"`
	GcpGcr    *GcpGcr    `json:"gcp_gcr,omitempty"`
}

func (o *RegistryAuthentication) GetAwsEcr() *AwsEcr {
	if o == nil {
		return nil
	}
	return o.AwsEcr
}

func (o *RegistryAuthentication) GetBasic() *Basic {
	if o == nil {
		return nil
	}
	return o.Basic
}

func (o *RegistryAuthentication) GetDockerHub() *DockerHub {
	if o == nil {
		return nil
	}
	return o.DockerHub
}

func (o *RegistryAuthentication) GetGcpGcr() *GcpGcr {
	if o == nil {
		return nil
	}
	return o.GcpGcr
}

// CreateContainer - Represents a container
type CreateContainer struct {
	Command                []string                `json:"command,omitempty"`
	EnvironmentVariables   map[string]string       `json:"environment_variables,omitempty"`
	Image                  string                  `json:"image"`
	Logging                *CreateContainerLogging `json:"logging,omitempty"`
	RegistryAuthentication *RegistryAuthentication `json:"registry_authentication,omitempty"`
	// Represents a container resource requirements
	Resources ContainerResourceRequirements `json:"resources"`
}

func (o *CreateContainer) GetCommand() []string {
	if o == nil {
		return nil
	}
	return o.Command
}

func (o *CreateContainer) GetEnvironmentVariables() map[string]string {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *CreateContainer) GetImage() string {
	if o == nil {
		return ""
	}
	return o.Image
}

func (o *CreateContainer) GetLogging() *CreateContainerLogging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *CreateContainer) GetRegistryAuthentication() *RegistryAuthentication {
	if o == nil {
		return nil
	}
	return o.RegistryAuthentication
}

func (o *CreateContainer) GetResources() ContainerResourceRequirements {
	if o == nil {
		return ContainerResourceRequirements{}
	}
	return o.Resources
}
