// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk/pkg/utils"
	"time"
)

// State - The state of the container group instance
type State string

const (
	StateCreating State = "creating"
	StateRunning  State = "running"
)

func (e State) ToPointer() *State {
	return &e
}

func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creating":
		fallthrough
	case "running":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type Instances struct {
	// The organization-specific machine ID
	MachineID string `json:"machine_id"`
	// The state of the container group instance
	State State `json:"state"`
	// The UTC date & time when the workload on this machine transitioned to the current state
	UpdateTime time.Time `json:"update_time"`
}

func (i Instances) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Instances) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Instances) GetMachineID() string {
	if o == nil {
		return ""
	}
	return o.MachineID
}

func (o *Instances) GetState() State {
	if o == nil {
		return State("")
	}
	return o.State
}

func (o *Instances) GetUpdateTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdateTime
}

// ContainerGroupInstances - Represents a list of container group instances
type ContainerGroupInstances struct {
	Instances []Instances `json:"instances"`
}

func (o *ContainerGroupInstances) GetInstances() []Instances {
	if o == nil {
		return []Instances{}
	}
	return o.Instances
}
