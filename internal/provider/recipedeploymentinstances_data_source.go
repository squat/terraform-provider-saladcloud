// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/squat/terraform-provider-saladcloud/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RecipeDeploymentInstancesDataSource{}
var _ datasource.DataSourceWithConfigure = &RecipeDeploymentInstancesDataSource{}

func NewRecipeDeploymentInstancesDataSource() datasource.DataSource {
	return &RecipeDeploymentInstancesDataSource{}
}

// RecipeDeploymentInstancesDataSource is the data source implementation.
type RecipeDeploymentInstancesDataSource struct {
	client *sdk.SDK
}

// RecipeDeploymentInstancesDataSourceModel describes the data model.
type RecipeDeploymentInstancesDataSourceModel struct {
	Instances        []Instances  `tfsdk:"instances"`
	Name             types.String `tfsdk:"name"`
	OrganizationName types.String `tfsdk:"organization_name"`
	ProjectName      types.String `tfsdk:"project_name"`
}

// Metadata returns the data source type name.
func (r *RecipeDeploymentInstancesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_recipe_deployment_instances"
}

// Schema defines the schema for the data source.
func (r *RecipeDeploymentInstancesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RecipeDeploymentInstances DataSource",

		Attributes: map[string]schema.Attribute{
			"instances": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"machine_id": schema.StringAttribute{
							Computed:    true,
							Description: `The organization-specific machine ID`,
						},
						"state": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"creating",
									"running",
								),
							},
							MarkdownDescription: `must be one of ["creating", "running"]` + "\n" +
								`The state of the recipe deployment instance`,
						},
						"update_time": schema.StringAttribute{
							Computed: true,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
							Description: `The UTC date & time when the workload on this machine transitioned to the current state`,
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The unique recipe deployment name`,
			},
			"organization_name": schema.StringAttribute{
				Required:    true,
				Description: `The unique organization name`,
			},
			"project_name": schema.StringAttribute{
				Required:    true,
				Description: `The unique project name`,
			},
		},
	}
}

func (r *RecipeDeploymentInstancesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RecipeDeploymentInstancesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RecipeDeploymentInstancesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	organizationName := data.OrganizationName.ValueString()
	projectName := data.ProjectName.ValueString()
	recipeDeploymentName := data.Name.ValueString()
	request := operations.ListRecipeDeploymentInstancesRequest{
		OrganizationName:     organizationName,
		ProjectName:          projectName,
		RecipeDeploymentName: recipeDeploymentName,
	}
	res, err := r.client.RecipeDeployments.ListRecipeDeploymentInstances(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RecipeDeploymentInstances == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.RecipeDeploymentInstances)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
