// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk/pkg/models/shared"
	"time"
)

func (r *RecipeDeploymentsDataSourceModel) RefreshFromGetResponse(resp *shared.RecipeDeploymentList) {
	r.Items = nil
	for _, itemsItem := range resp.Items {
		var items1 RecipeDeployment
		if itemsItem.CurrentState.Description != nil {
			items1.CurrentState.Description = types.StringValue(*itemsItem.CurrentState.Description)
		} else {
			items1.CurrentState.Description = types.StringNull()
		}
		items1.CurrentState.FinishTime = types.StringValue(itemsItem.CurrentState.FinishTime.Format(time.RFC3339Nano))
		items1.CurrentState.InstanceStatusCount.AllocatingCount = types.Int64Value(itemsItem.CurrentState.InstanceStatusCount.AllocatingCount)
		items1.CurrentState.InstanceStatusCount.CreatingCount = types.Int64Value(itemsItem.CurrentState.InstanceStatusCount.CreatingCount)
		items1.CurrentState.InstanceStatusCount.RunningCount = types.Int64Value(itemsItem.CurrentState.InstanceStatusCount.RunningCount)
		items1.CurrentState.StartTime = types.StringValue(itemsItem.CurrentState.StartTime.Format(time.RFC3339Nano))
		items1.CurrentState.Status = types.StringValue(string(itemsItem.CurrentState.Status))
		items1.DisplayName = types.StringValue(itemsItem.DisplayName)
		items1.ID = types.StringValue(itemsItem.ID)
		items1.Name = types.StringValue(itemsItem.Name)
		if itemsItem.Networking == nil {
			items1.Networking = nil
		} else {
			items1.Networking = &ContainerGroupNetworking{}
			items1.Networking.Auth = types.BoolValue(itemsItem.Networking.Auth)
			items1.Networking.DNS = types.StringValue(itemsItem.Networking.DNS)
			items1.Networking.Port = types.Int64Value(itemsItem.Networking.Port)
			items1.Networking.Protocol = types.StringValue(string(itemsItem.Networking.Protocol))
		}
		items1.Recipe.ID = types.StringValue(itemsItem.Recipe.ID)
		items1.Recipe.Name = types.StringValue(itemsItem.Recipe.Name)
		if itemsItem.Recipe.Networking == nil {
			items1.Recipe.Networking = nil
		} else {
			items1.Recipe.Networking = &ContainerGroupNetworking{}
			items1.Recipe.Networking.Auth = types.BoolValue(itemsItem.Recipe.Networking.Auth)
			items1.Recipe.Networking.DNS = types.StringValue(itemsItem.Recipe.Networking.DNS)
			items1.Recipe.Networking.Port = types.Int64Value(itemsItem.Recipe.Networking.Port)
			items1.Recipe.Networking.Protocol = types.StringValue(string(itemsItem.Recipe.Networking.Protocol))
		}
		items1.Recipe.Readme = types.StringValue(itemsItem.Recipe.Readme)
		if itemsItem.Recipe.Resources == nil {
			items1.Recipe.Resources = nil
		} else {
			items1.Recipe.Resources = &RecipeResources{}
			items1.Recipe.Resources.CPU = types.Int64Value(itemsItem.Recipe.Resources.CPU)
			items1.Recipe.Resources.GpuClass = types.StringValue(itemsItem.Recipe.Resources.GpuClass)
			items1.Recipe.Resources.RAM = types.Int64Value(itemsItem.Recipe.Resources.RAM)
		}
		items1.Replicas = types.Int64Value(itemsItem.Replicas)
		r.Items = append(r.Items, items1)
	}
}
