// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk/pkg/models/shared"
	"time"
)

func (r *ContainerGroupsDataSourceModel) RefreshFromGetResponse(resp *shared.ContainerGroupList) {
	r.Items = nil
	for _, itemsItem := range resp.Items {
		var items1 ContainerGroup
		items1.AutostartPolicy = types.BoolValue(itemsItem.AutostartPolicy)
		items1.Container.Command = nil
		for _, v := range itemsItem.Container.Command {
			items1.Container.Command = append(items1.Container.Command, types.StringValue(v))
		}
		if items1.Container.EnvironmentVariables == nil && len(itemsItem.Container.EnvironmentVariables) > 0 {
			items1.Container.EnvironmentVariables = make(map[string]types.String)
			for key, value := range itemsItem.Container.EnvironmentVariables {
				items1.Container.EnvironmentVariables[key] = types.StringValue(value)
			}
		}
		items1.Container.Image = types.StringValue(itemsItem.Container.Image)
		if itemsItem.Container.Logging == nil {
			items1.Container.Logging = nil
		} else {
			items1.Container.Logging = &Logging{}
			if itemsItem.Container.Logging.NewRelic == nil {
				items1.Container.Logging.NewRelic = nil
			} else {
				items1.Container.Logging.NewRelic = &NewRelic{}
				items1.Container.Logging.NewRelic.Host = types.StringValue(itemsItem.Container.Logging.NewRelic.Host)
				items1.Container.Logging.NewRelic.IngestionKey = types.StringValue(itemsItem.Container.Logging.NewRelic.IngestionKey)
			}
			if itemsItem.Container.Logging.Splunk == nil {
				items1.Container.Logging.Splunk = nil
			} else {
				items1.Container.Logging.Splunk = &Splunk{}
				items1.Container.Logging.Splunk.Host = types.StringValue(itemsItem.Container.Logging.Splunk.Host)
				items1.Container.Logging.Splunk.Token = types.StringValue(itemsItem.Container.Logging.Splunk.Token)
			}
			if itemsItem.Container.Logging.TCP == nil {
				items1.Container.Logging.TCP = nil
			} else {
				items1.Container.Logging.TCP = &TCP{}
				items1.Container.Logging.TCP.Host = types.StringValue(itemsItem.Container.Logging.TCP.Host)
				items1.Container.Logging.TCP.Port = types.Int64Value(itemsItem.Container.Logging.TCP.Port)
			}
		}
		items1.Container.Resources.CPU = types.Int64Value(itemsItem.Container.Resources.CPU)
		if itemsItem.Container.Resources.GpuClass != nil {
			items1.Container.Resources.GpuClass = types.StringValue(*itemsItem.Container.Resources.GpuClass)
		} else {
			items1.Container.Resources.GpuClass = types.StringNull()
		}
		items1.Container.Resources.GpuClasses = nil
		for _, v := range itemsItem.Container.Resources.GpuClasses {
			items1.Container.Resources.GpuClasses = append(items1.Container.Resources.GpuClasses, types.StringValue(v))
		}
		items1.Container.Resources.Memory = types.Int64Value(itemsItem.Container.Resources.Memory)
		items1.CountryCodes = nil
		for _, v := range itemsItem.CountryCodes {
			items1.CountryCodes = append(items1.CountryCodes, types.StringValue(string(v)))
		}
		items1.CreateTime = types.StringValue(itemsItem.CreateTime.Format(time.RFC3339Nano))
		if itemsItem.CurrentState.Description != nil {
			items1.CurrentState.Description = types.StringValue(*itemsItem.CurrentState.Description)
		} else {
			items1.CurrentState.Description = types.StringNull()
		}
		items1.CurrentState.FinishTime = types.StringValue(itemsItem.CurrentState.FinishTime.Format(time.RFC3339Nano))
		items1.CurrentState.InstanceStatusCount.AllocatingCount = types.Int64Value(itemsItem.CurrentState.InstanceStatusCount.AllocatingCount)
		items1.CurrentState.InstanceStatusCount.CreatingCount = types.Int64Value(itemsItem.CurrentState.InstanceStatusCount.CreatingCount)
		items1.CurrentState.InstanceStatusCount.RunningCount = types.Int64Value(itemsItem.CurrentState.InstanceStatusCount.RunningCount)
		items1.CurrentState.StartTime = types.StringValue(itemsItem.CurrentState.StartTime.Format(time.RFC3339Nano))
		items1.CurrentState.Status = types.StringValue(string(itemsItem.CurrentState.Status))
		if itemsItem.DisplayName != nil {
			items1.DisplayName = types.StringValue(*itemsItem.DisplayName)
		} else {
			items1.DisplayName = types.StringNull()
		}
		items1.ID = types.StringValue(itemsItem.ID)
		if itemsItem.LivenessProbe == nil {
			items1.LivenessProbe = nil
		} else {
			items1.LivenessProbe = &ContainerGroupProbe{}
			if itemsItem.LivenessProbe.Exec == nil {
				items1.LivenessProbe.Exec = nil
			} else {
				items1.LivenessProbe.Exec = &ContainerGroupProbeExec{}
				items1.LivenessProbe.Exec.Command = nil
				for _, v := range itemsItem.LivenessProbe.Exec.Command {
					items1.LivenessProbe.Exec.Command = append(items1.LivenessProbe.Exec.Command, types.StringValue(v))
				}
			}
			items1.LivenessProbe.FailureThreshold = types.Int64Value(itemsItem.LivenessProbe.FailureThreshold)
			if itemsItem.LivenessProbe.Grpc == nil {
				items1.LivenessProbe.Grpc = nil
			} else {
				items1.LivenessProbe.Grpc = &ContainerGroupProbeGrpc{}
				items1.LivenessProbe.Grpc.Port = types.Int64Value(itemsItem.LivenessProbe.Grpc.Port)
				items1.LivenessProbe.Grpc.Service = types.StringValue(itemsItem.LivenessProbe.Grpc.Service)
			}
			if itemsItem.LivenessProbe.HTTP == nil {
				items1.LivenessProbe.HTTP = nil
			} else {
				items1.LivenessProbe.HTTP = &ContainerGroupProbeHTTP{}
				items1.LivenessProbe.HTTP.Headers = nil
				for _, headersItem := range itemsItem.LivenessProbe.HTTP.Headers {
					var headers1 HTTPHeaders
					headers1.Name = types.StringValue(headersItem.Name)
					headers1.Value = types.StringValue(headersItem.Value)
					items1.LivenessProbe.HTTP.Headers = append(items1.LivenessProbe.HTTP.Headers, headers1)
				}
				items1.LivenessProbe.HTTP.Path = types.StringValue(itemsItem.LivenessProbe.HTTP.Path)
				items1.LivenessProbe.HTTP.Port = types.Int64Value(itemsItem.LivenessProbe.HTTP.Port)
				if itemsItem.LivenessProbe.HTTP.Scheme != nil {
					items1.LivenessProbe.HTTP.Scheme = types.StringValue(string(*itemsItem.LivenessProbe.HTTP.Scheme))
				} else {
					items1.LivenessProbe.HTTP.Scheme = types.StringNull()
				}
			}
			items1.LivenessProbe.InitialDelaySeconds = types.Int64Value(itemsItem.LivenessProbe.InitialDelaySeconds)
			items1.LivenessProbe.PeriodSeconds = types.Int64Value(itemsItem.LivenessProbe.PeriodSeconds)
			items1.LivenessProbe.SuccessThreshold = types.Int64Value(itemsItem.LivenessProbe.SuccessThreshold)
			if itemsItem.LivenessProbe.TCP == nil {
				items1.LivenessProbe.TCP = nil
			} else {
				items1.LivenessProbe.TCP = &ContainerGroupProbeTCP{}
				items1.LivenessProbe.TCP.Port = types.Int64Value(itemsItem.LivenessProbe.TCP.Port)
			}
			items1.LivenessProbe.TimeoutSeconds = types.Int64Value(itemsItem.LivenessProbe.TimeoutSeconds)
		}
		items1.Name = types.StringValue(itemsItem.Name)
		if itemsItem.Networking == nil {
			items1.Networking = nil
		} else {
			items1.Networking = &ContainerGroupNetworking{}
			items1.Networking.Auth = types.BoolValue(itemsItem.Networking.Auth)
			items1.Networking.DNS = types.StringValue(itemsItem.Networking.DNS)
			items1.Networking.Port = types.Int64Value(itemsItem.Networking.Port)
			items1.Networking.Protocol = types.StringValue(string(itemsItem.Networking.Protocol))
		}
		if itemsItem.ReadinessProbe == nil {
			items1.ReadinessProbe = nil
		} else {
			items1.ReadinessProbe = &ContainerGroupProbe{}
			if itemsItem.ReadinessProbe.Exec == nil {
				items1.ReadinessProbe.Exec = nil
			} else {
				items1.ReadinessProbe.Exec = &ContainerGroupProbeExec{}
				items1.ReadinessProbe.Exec.Command = nil
				for _, v := range itemsItem.ReadinessProbe.Exec.Command {
					items1.ReadinessProbe.Exec.Command = append(items1.ReadinessProbe.Exec.Command, types.StringValue(v))
				}
			}
			items1.ReadinessProbe.FailureThreshold = types.Int64Value(itemsItem.ReadinessProbe.FailureThreshold)
			if itemsItem.ReadinessProbe.Grpc == nil {
				items1.ReadinessProbe.Grpc = nil
			} else {
				items1.ReadinessProbe.Grpc = &ContainerGroupProbeGrpc{}
				items1.ReadinessProbe.Grpc.Port = types.Int64Value(itemsItem.ReadinessProbe.Grpc.Port)
				items1.ReadinessProbe.Grpc.Service = types.StringValue(itemsItem.ReadinessProbe.Grpc.Service)
			}
			if itemsItem.ReadinessProbe.HTTP == nil {
				items1.ReadinessProbe.HTTP = nil
			} else {
				items1.ReadinessProbe.HTTP = &ContainerGroupProbeHTTP{}
				items1.ReadinessProbe.HTTP.Headers = nil
				for _, headersItem1 := range itemsItem.ReadinessProbe.HTTP.Headers {
					var headers3 HTTPHeaders
					headers3.Name = types.StringValue(headersItem1.Name)
					headers3.Value = types.StringValue(headersItem1.Value)
					items1.ReadinessProbe.HTTP.Headers = append(items1.ReadinessProbe.HTTP.Headers, headers3)
				}
				items1.ReadinessProbe.HTTP.Path = types.StringValue(itemsItem.ReadinessProbe.HTTP.Path)
				items1.ReadinessProbe.HTTP.Port = types.Int64Value(itemsItem.ReadinessProbe.HTTP.Port)
				if itemsItem.ReadinessProbe.HTTP.Scheme != nil {
					items1.ReadinessProbe.HTTP.Scheme = types.StringValue(string(*itemsItem.ReadinessProbe.HTTP.Scheme))
				} else {
					items1.ReadinessProbe.HTTP.Scheme = types.StringNull()
				}
			}
			items1.ReadinessProbe.InitialDelaySeconds = types.Int64Value(itemsItem.ReadinessProbe.InitialDelaySeconds)
			items1.ReadinessProbe.PeriodSeconds = types.Int64Value(itemsItem.ReadinessProbe.PeriodSeconds)
			items1.ReadinessProbe.SuccessThreshold = types.Int64Value(itemsItem.ReadinessProbe.SuccessThreshold)
			if itemsItem.ReadinessProbe.TCP == nil {
				items1.ReadinessProbe.TCP = nil
			} else {
				items1.ReadinessProbe.TCP = &ContainerGroupProbeTCP{}
				items1.ReadinessProbe.TCP.Port = types.Int64Value(itemsItem.ReadinessProbe.TCP.Port)
			}
			items1.ReadinessProbe.TimeoutSeconds = types.Int64Value(itemsItem.ReadinessProbe.TimeoutSeconds)
		}
		items1.Replicas = types.Int64Value(itemsItem.Replicas)
		items1.RestartPolicy = types.StringValue(string(itemsItem.RestartPolicy))
		if itemsItem.StartupProbe == nil {
			items1.StartupProbe = nil
		} else {
			items1.StartupProbe = &ContainerGroupProbe{}
			if itemsItem.StartupProbe.Exec == nil {
				items1.StartupProbe.Exec = nil
			} else {
				items1.StartupProbe.Exec = &ContainerGroupProbeExec{}
				items1.StartupProbe.Exec.Command = nil
				for _, v := range itemsItem.StartupProbe.Exec.Command {
					items1.StartupProbe.Exec.Command = append(items1.StartupProbe.Exec.Command, types.StringValue(v))
				}
			}
			items1.StartupProbe.FailureThreshold = types.Int64Value(itemsItem.StartupProbe.FailureThreshold)
			if itemsItem.StartupProbe.Grpc == nil {
				items1.StartupProbe.Grpc = nil
			} else {
				items1.StartupProbe.Grpc = &ContainerGroupProbeGrpc{}
				items1.StartupProbe.Grpc.Port = types.Int64Value(itemsItem.StartupProbe.Grpc.Port)
				items1.StartupProbe.Grpc.Service = types.StringValue(itemsItem.StartupProbe.Grpc.Service)
			}
			if itemsItem.StartupProbe.HTTP == nil {
				items1.StartupProbe.HTTP = nil
			} else {
				items1.StartupProbe.HTTP = &ContainerGroupProbeHTTP{}
				items1.StartupProbe.HTTP.Headers = nil
				for _, headersItem2 := range itemsItem.StartupProbe.HTTP.Headers {
					var headers5 HTTPHeaders
					headers5.Name = types.StringValue(headersItem2.Name)
					headers5.Value = types.StringValue(headersItem2.Value)
					items1.StartupProbe.HTTP.Headers = append(items1.StartupProbe.HTTP.Headers, headers5)
				}
				items1.StartupProbe.HTTP.Path = types.StringValue(itemsItem.StartupProbe.HTTP.Path)
				items1.StartupProbe.HTTP.Port = types.Int64Value(itemsItem.StartupProbe.HTTP.Port)
				if itemsItem.StartupProbe.HTTP.Scheme != nil {
					items1.StartupProbe.HTTP.Scheme = types.StringValue(string(*itemsItem.StartupProbe.HTTP.Scheme))
				} else {
					items1.StartupProbe.HTTP.Scheme = types.StringNull()
				}
			}
			items1.StartupProbe.InitialDelaySeconds = types.Int64Value(itemsItem.StartupProbe.InitialDelaySeconds)
			items1.StartupProbe.PeriodSeconds = types.Int64Value(itemsItem.StartupProbe.PeriodSeconds)
			items1.StartupProbe.SuccessThreshold = types.Int64Value(itemsItem.StartupProbe.SuccessThreshold)
			if itemsItem.StartupProbe.TCP == nil {
				items1.StartupProbe.TCP = nil
			} else {
				items1.StartupProbe.TCP = &ContainerGroupProbeTCP{}
				items1.StartupProbe.TCP.Port = types.Int64Value(itemsItem.StartupProbe.TCP.Port)
			}
			items1.StartupProbe.TimeoutSeconds = types.Int64Value(itemsItem.StartupProbe.TimeoutSeconds)
		}
		items1.UpdateTime = types.StringValue(itemsItem.UpdateTime.Format(time.RFC3339Nano))
		r.Items = append(r.Items, items1)
	}
}
