// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RecipeDataSource{}
var _ datasource.DataSourceWithConfigure = &RecipeDataSource{}

func NewRecipeDataSource() datasource.DataSource {
	return &RecipeDataSource{}
}

// RecipeDataSource is the data source implementation.
type RecipeDataSource struct {
	client *sdk.SDK
}

// RecipeDataSourceModel describes the data model.
type RecipeDataSourceModel struct {
	ID               types.String              `tfsdk:"id"`
	Name             types.String              `tfsdk:"name"`
	Networking       *ContainerGroupNetworking `tfsdk:"networking"`
	OrganizationName types.String              `tfsdk:"organization_name"`
	Readme           types.String              `tfsdk:"readme"`
	Resources        *RecipeResources          `tfsdk:"resources"`
}

// Metadata returns the data source type name.
func (r *RecipeDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_recipe"
}

// Schema defines the schema for the data source.
func (r *RecipeDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Recipe DataSource",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique identifier`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The unique recipe name`,
			},
			"networking": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auth": schema.BoolAttribute{
						Computed: true,
					},
					"dns": schema.StringAttribute{
						Computed: true,
					},
					"port": schema.Int64Attribute{
						Computed: true,
					},
					"protocol": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["http"]`,
					},
				},
				Description: `Represents recipe networking parameters`,
			},
			"organization_name": schema.StringAttribute{
				Required:    true,
				Description: `The unique organization name`,
			},
			"readme": schema.StringAttribute{
				Computed:    true,
				Description: `A markdown file containing a brief summary of the recipe`,
			},
			"resources": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"cpu": schema.Int64Attribute{
						Computed: true,
					},
					"gpu_class": schema.StringAttribute{
						Computed: true,
					},
					"ram": schema.Int64Attribute{
						Computed: true,
					},
				},
				Description: `Represents a recipe resources`,
			},
		},
	}
}

func (r *RecipeDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RecipeDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RecipeDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	organizationName := data.OrganizationName.ValueString()
	recipeName := data.Name.ValueString()
	request := operations.GetRecipeRequest{
		OrganizationName: organizationName,
		RecipeName:       recipeName,
	}
	res, err := r.client.Recipes.GetRecipe(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Recipe == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.Recipe)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
