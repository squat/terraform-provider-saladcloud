// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk"
	"github.com/squat/terraform-provider-saladcloud/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RecipeDeploymentsDataSource{}
var _ datasource.DataSourceWithConfigure = &RecipeDeploymentsDataSource{}

func NewRecipeDeploymentsDataSource() datasource.DataSource {
	return &RecipeDeploymentsDataSource{}
}

// RecipeDeploymentsDataSource is the data source implementation.
type RecipeDeploymentsDataSource struct {
	client *sdk.SDK
}

// RecipeDeploymentsDataSourceModel describes the data model.
type RecipeDeploymentsDataSourceModel struct {
	Items            []RecipeDeployment `tfsdk:"items"`
	OrganizationName types.String       `tfsdk:"organization_name"`
	ProjectName      types.String       `tfsdk:"project_name"`
}

// Metadata returns the data source type name.
func (r *RecipeDeploymentsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_recipe_deployments"
}

// Schema defines the schema for the data source.
func (r *RecipeDeploymentsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RecipeDeployments DataSource",

		Attributes: map[string]schema.Attribute{
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"current_state": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed: true,
								},
								"finish_time": schema.StringAttribute{
									Computed: true,
								},
								"instance_status_count": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"allocating_count": schema.Int64Attribute{
											Computed: true,
										},
										"creating_count": schema.Int64Attribute{
											Computed: true,
										},
										"running_count": schema.Int64Attribute{
											Computed: true,
										},
									},
									Description: `Represents a container group instance status count`,
								},
								"start_time": schema.StringAttribute{
									Computed: true,
								},
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["pending", "running", "stopped", "succeeded", "failed", "deploying"]`,
								},
							},
							Description: `Represents a container group state`,
						},
						"display_name": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"networking": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"auth": schema.BoolAttribute{
									Computed: true,
								},
								"dns": schema.StringAttribute{
									Computed: true,
								},
								"port": schema.Int64Attribute{
									Computed: true,
								},
								"protocol": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["http"]`,
								},
							},
							Description: `Represents recipe networking parameters`,
						},
						"recipe": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `The unique identifier`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `The recipe name`,
								},
								"networking": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"auth": schema.BoolAttribute{
											Computed: true,
										},
										"dns": schema.StringAttribute{
											Computed: true,
										},
										"port": schema.Int64Attribute{
											Computed: true,
										},
										"protocol": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["http"]`,
										},
									},
									Description: `Represents recipe networking parameters`,
								},
								"readme": schema.StringAttribute{
									Computed:    true,
									Description: `A markdown file containing a brief summary of the recipe`,
								},
								"resources": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"cpu": schema.Int64Attribute{
											Computed: true,
										},
										"gpu_class": schema.StringAttribute{
											Computed: true,
										},
										"ram": schema.Int64Attribute{
											Computed: true,
										},
									},
									Description: `Represents a recipe resources`,
								},
							},
							Description: `Represents a recipe`,
						},
						"replicas": schema.Int64Attribute{
							Computed: true,
						},
					},
				},
			},
			"organization_name": schema.StringAttribute{
				Required:    true,
				Description: `The unique organization name`,
			},
			"project_name": schema.StringAttribute{
				Required:    true,
				Description: `The unique project name`,
			},
		},
	}
}

func (r *RecipeDeploymentsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RecipeDeploymentsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RecipeDeploymentsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	organizationName := data.OrganizationName.ValueString()
	projectName := data.ProjectName.ValueString()
	request := operations.ListRecipeDeploymentsRequest{
		OrganizationName: organizationName,
		ProjectName:      projectName,
	}
	res, err := r.client.RecipeDeployments.ListRecipeDeployments(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RecipeDeploymentList == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.RecipeDeploymentList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
